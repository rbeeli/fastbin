#pragma once

#include <cstddef>
#include <cstring>
#include <cassert>
#include <ostream>
#include <span>
#include <cstdint>
#include <string_view>
#include "_traits.hpp"
#include "TradeSide.hpp"
#include "TickDirection.hpp"

namespace my_models
{
/**
 * https://bybit-exchange.github.io/docs/v5/websocket/public/trade
 *
 * ------------------------------------------------------------
 *
 * Binary serializable data container generated by `fastbin`.
 * 
 * This container has variable size.
 * All setter methods starting from the first variable-sized member and afterwards MUST be called in order.
 *
 * Members in order
 * ================
 * - `server_time` [`std::int64_t`] (fixed)
 * - `recv_time` [`std::int64_t`] (fixed)
 * - `symbol` [`std::string_view`] (variable)
 * - `fill_time` [`std::int64_t`] (fixed)
 * - `side` [`TradeSide`]     (fixed)
 * - `price` [`double`]       (fixed)
 * - `price_chg_dir` [`TickDirection`] (fixed)
 * - `size` [`double`]        (fixed)
 * - `trade_id` [`std::string_view`] (variable)
 * - `block_trade` [`bool`]   (fixed)
 *
 * The `finalize()` method MUST be called after all setter methods have been called.
 * 
 * It is the responsibility of the caller to ensure that the buffer is
 * large enough to hold all data.
 */
class StreamTrade final
{
public:
    std::byte* buffer{nullptr};
    size_t buffer_size{0};
    bool owns_buffer{false};

private:
    StreamTrade(
        std::byte* buffer, size_t buffer_size, bool owns_buffer
    ) noexcept
        : buffer(buffer), buffer_size(buffer_size), owns_buffer(owns_buffer)
    {
    }

public:
    static StreamTrade create(std::byte* buffer, size_t buffer_size, bool owns_buffer) noexcept
    {
        std::memset(buffer, 0, buffer_size);
        return {buffer, buffer_size, owns_buffer};
    }

    static StreamTrade create(std::span<std::byte> buffer, bool owns_buffer) noexcept
    {
        return create(buffer.data(), buffer.size(), owns_buffer);
    }

    static StreamTrade open(std::byte* buffer, size_t buffer_size, bool owns_buffer) noexcept
    {
        return {buffer, buffer_size, owns_buffer};
    }
    
    static StreamTrade open(std::span<std::byte> buffer, bool owns_buffer) noexcept
    {
        return StreamTrade(buffer.data(), buffer.size(), owns_buffer);
    }
    
    // destructor
    ~StreamTrade() noexcept
    {
        if (owns_buffer && buffer != nullptr)
        {
            delete[] buffer;
            buffer = nullptr;
        }
    }

    // disable copy
    StreamTrade(const StreamTrade&) = delete;
    StreamTrade& operator=(const StreamTrade&) = delete;

    // enable move
    StreamTrade(StreamTrade&& other) noexcept
        : buffer(other.buffer), buffer_size(other.buffer_size), owns_buffer(other.owns_buffer)
    {
        other.buffer = nullptr;
        other.buffer_size = 0;
    }
    StreamTrade& operator=(StreamTrade&& other) noexcept
    {
        if (this != &other)
        {
            if (owns_buffer && buffer != nullptr)
               delete[] buffer;
            buffer = other.buffer;
            buffer_size = other.buffer_size;
            owns_buffer = other.owns_buffer;
            other.buffer = nullptr;
            other.buffer_size = 0;
            other.owns_buffer = false;
        }
        return *this;
    }

    // Member: server_time [std::int64_t]

    inline std::int64_t server_time() const noexcept
    {
        return *reinterpret_cast<const std::int64_t*>(buffer + _server_time_offset());
    }

    inline void server_time(const std::int64_t value) noexcept
    {
        *reinterpret_cast<std::int64_t*>(buffer + _server_time_offset()) = value;
    }

    constexpr inline size_t _server_time_offset() const noexcept
    {
        return 8;
    }

    constexpr inline size_t _server_time_size_aligned() const noexcept
    {
        return 8;
    }

    static size_t _server_time_calc_size_aligned(const std::int64_t& value)
    {
        return 8;
    }


    // Member: recv_time [std::int64_t]

    inline std::int64_t recv_time() const noexcept
    {
        return *reinterpret_cast<const std::int64_t*>(buffer + _recv_time_offset());
    }

    inline void recv_time(const std::int64_t value) noexcept
    {
        *reinterpret_cast<std::int64_t*>(buffer + _recv_time_offset()) = value;
    }

    constexpr inline size_t _recv_time_offset() const noexcept
    {
        return 16;
    }

    constexpr inline size_t _recv_time_size_aligned() const noexcept
    {
        return 8;
    }

    static size_t _recv_time_calc_size_aligned(const std::int64_t& value)
    {
        return 8;
    }


    // Member: symbol [std::string_view]

    inline std::string_view symbol() const noexcept
    {
        size_t n_bytes = _symbol_size_unaligned() - 8;
        auto ptr = reinterpret_cast<const char*>(buffer + _symbol_offset() + 8);
        return std::string_view(ptr, n_bytes);
    }

    inline void symbol(const std::string_view value) noexcept
    {
        size_t offset = _symbol_offset();
        size_t contents_size = value.size() * 1;
        size_t unaligned_size = 8 + contents_size;
        size_t aligned_size = (unaligned_size + 7) & ~7;
        size_t aligned_diff = aligned_size - unaligned_size;
        size_t aligned_size_high = aligned_size | (aligned_diff << 56);
        *reinterpret_cast<size_t*>(buffer + offset) = aligned_size_high;
        auto dest_ptr = reinterpret_cast<std::byte*>(buffer + offset + 8);
        auto src_ptr = reinterpret_cast<const std::byte*>(value.data());
        std::copy(src_ptr, src_ptr + contents_size, dest_ptr);
    }

    constexpr inline size_t _symbol_offset() const noexcept
    {
        return 24;
    }

    constexpr inline size_t _symbol_size_aligned() const noexcept
    {
        size_t stored_size = *reinterpret_cast<size_t*>(buffer + _symbol_offset());
        size_t aligned_size = stored_size & 0x00FFFFFFFFFFFFFF;
        return aligned_size;
    }

    static size_t _symbol_calc_size_aligned(const std::string_view& value)
    {
        size_t contents_size = value.size() * 1;
        size_t unaligned_size = 8 + contents_size;
        return (unaligned_size + 7) & ~7;
    }

    constexpr inline size_t _symbol_size_unaligned() const noexcept
    {
        size_t stored_size = *reinterpret_cast<size_t*>(buffer + _symbol_offset());
        size_t aligned_diff = stored_size >> 56;
        size_t aligned_size = stored_size & 0x00FFFFFFFFFFFFFF;
        return aligned_size - aligned_diff;
    }

    // Member: fill_time [std::int64_t]

    inline std::int64_t fill_time() const noexcept
    {
        return *reinterpret_cast<const std::int64_t*>(buffer + _fill_time_offset());
    }

    inline void fill_time(const std::int64_t value) noexcept
    {
        *reinterpret_cast<std::int64_t*>(buffer + _fill_time_offset()) = value;
    }

    constexpr inline size_t _fill_time_offset() const noexcept
    {
        return _symbol_offset() + _symbol_size_aligned();
    }

    constexpr inline size_t _fill_time_size_aligned() const noexcept
    {
        return 8;
    }

    static size_t _fill_time_calc_size_aligned(const std::int64_t& value)
    {
        return 8;
    }


    // Member: side [TradeSide]

    inline TradeSide side() const noexcept
    {
        return static_cast<TradeSide>(*reinterpret_cast<const TradeSide*>(buffer + _side_offset()));
    }

    inline void side(const TradeSide value) noexcept
    {
        *reinterpret_cast<TradeSide*>(buffer + _side_offset()) = static_cast<TradeSide>(value);
    }

    constexpr inline size_t _side_offset() const noexcept
    {
        return _fill_time_offset() + _fill_time_size_aligned();
    }

    constexpr inline size_t _side_size_aligned() const noexcept
    {
        return 8;
    }

    static size_t _side_calc_size_aligned(const TradeSide& value)
    {
        return 8;
    }


    // Member: price [double]

    inline double price() const noexcept
    {
        return *reinterpret_cast<const double*>(buffer + _price_offset());
    }

    inline void price(const double value) noexcept
    {
        *reinterpret_cast<double*>(buffer + _price_offset()) = value;
    }

    constexpr inline size_t _price_offset() const noexcept
    {
        return _side_offset() + _side_size_aligned();
    }

    constexpr inline size_t _price_size_aligned() const noexcept
    {
        return 8;
    }

    static size_t _price_calc_size_aligned(const double& value)
    {
        return 8;
    }


    // Member: price_chg_dir [TickDirection]

    inline TickDirection price_chg_dir() const noexcept
    {
        return static_cast<TickDirection>(*reinterpret_cast<const TickDirection*>(buffer + _price_chg_dir_offset()));
    }

    inline void price_chg_dir(const TickDirection value) noexcept
    {
        *reinterpret_cast<TickDirection*>(buffer + _price_chg_dir_offset()) = static_cast<TickDirection>(value);
    }

    constexpr inline size_t _price_chg_dir_offset() const noexcept
    {
        return _price_offset() + _price_size_aligned();
    }

    constexpr inline size_t _price_chg_dir_size_aligned() const noexcept
    {
        return 8;
    }

    static size_t _price_chg_dir_calc_size_aligned(const TickDirection& value)
    {
        return 8;
    }


    // Member: size [double]

    inline double size() const noexcept
    {
        return *reinterpret_cast<const double*>(buffer + _size_offset());
    }

    inline void size(const double value) noexcept
    {
        *reinterpret_cast<double*>(buffer + _size_offset()) = value;
    }

    constexpr inline size_t _size_offset() const noexcept
    {
        return _price_chg_dir_offset() + _price_chg_dir_size_aligned();
    }

    constexpr inline size_t _size_size_aligned() const noexcept
    {
        return 8;
    }

    static size_t _size_calc_size_aligned(const double& value)
    {
        return 8;
    }


    // Member: trade_id [std::string_view]

    inline std::string_view trade_id() const noexcept
    {
        size_t n_bytes = _trade_id_size_unaligned() - 8;
        auto ptr = reinterpret_cast<const char*>(buffer + _trade_id_offset() + 8);
        return std::string_view(ptr, n_bytes);
    }

    inline void trade_id(const std::string_view value) noexcept
    {
        size_t offset = _trade_id_offset();
        size_t contents_size = value.size() * 1;
        size_t unaligned_size = 8 + contents_size;
        size_t aligned_size = (unaligned_size + 7) & ~7;
        size_t aligned_diff = aligned_size - unaligned_size;
        size_t aligned_size_high = aligned_size | (aligned_diff << 56);
        *reinterpret_cast<size_t*>(buffer + offset) = aligned_size_high;
        auto dest_ptr = reinterpret_cast<std::byte*>(buffer + offset + 8);
        auto src_ptr = reinterpret_cast<const std::byte*>(value.data());
        std::copy(src_ptr, src_ptr + contents_size, dest_ptr);
    }

    constexpr inline size_t _trade_id_offset() const noexcept
    {
        return _size_offset() + _size_size_aligned();
    }

    constexpr inline size_t _trade_id_size_aligned() const noexcept
    {
        size_t stored_size = *reinterpret_cast<size_t*>(buffer + _trade_id_offset());
        size_t aligned_size = stored_size & 0x00FFFFFFFFFFFFFF;
        return aligned_size;
    }

    static size_t _trade_id_calc_size_aligned(const std::string_view& value)
    {
        size_t contents_size = value.size() * 1;
        size_t unaligned_size = 8 + contents_size;
        return (unaligned_size + 7) & ~7;
    }

    constexpr inline size_t _trade_id_size_unaligned() const noexcept
    {
        size_t stored_size = *reinterpret_cast<size_t*>(buffer + _trade_id_offset());
        size_t aligned_diff = stored_size >> 56;
        size_t aligned_size = stored_size & 0x00FFFFFFFFFFFFFF;
        return aligned_size - aligned_diff;
    }

    // Member: block_trade [bool]

    inline bool block_trade() const noexcept
    {
        return *reinterpret_cast<const bool*>(buffer + _block_trade_offset());
    }

    inline void block_trade(const bool value) noexcept
    {
        *reinterpret_cast<bool*>(buffer + _block_trade_offset()) = value;
    }

    constexpr inline size_t _block_trade_offset() const noexcept
    {
        return _trade_id_offset() + _trade_id_size_aligned();
    }

    constexpr inline size_t _block_trade_size_aligned() const noexcept
    {
        return 8;
    }

    static size_t _block_trade_calc_size_aligned(const bool& value)
    {
        return 8;
    }


    // --------------------------------------------------------------------------------

    constexpr inline size_t fastbin_calc_binary_size() const noexcept
    {
        return _block_trade_offset() + _block_trade_size_aligned();
    }

    static size_t fastbin_calc_binary_size(
        const std::string_view& symbol,
        const std::string_view& trade_id
    )
    {
        return 72 + _symbol_calc_size_aligned(symbol) +
            _trade_id_calc_size_aligned(trade_id);
    }

    /**
     * Returns the stored (aligned) binary size of the object.
     * This function should only be called after `fastbin_finalize()`.
     */
    constexpr inline size_t fastbin_binary_size() const noexcept
    {
        return *reinterpret_cast<size_t*>(buffer);
    }

    static constexpr size_t fastbin_fixed_size() noexcept
    {
        return -1;
    }

    /**
     * Finalizes the object by writing the binary size to the beginning of its buffer.
     * After calling this function, the underlying buffer can be used for serialization.
     * To get the actual buffer size, call `fastbin_binary_size()`.
     */
    inline void fastbin_finalize() noexcept
    {
        *reinterpret_cast<size_t*>(buffer) = fastbin_calc_binary_size();
    }

    /**
     * Copies the object to a new buffer.
     * The new buffer must be large enough to hold all data.
     */
    [[nodiscard]] StreamTrade copy(std::byte* dest_buffer, size_t dest_buffer_size, bool owns_buffer) const noexcept
    {
        size_t size = fastbin_binary_size();
        assert(dest_buffer_size >= size && "New buffer size too small.");
        std::memcpy(dest_buffer, buffer, size);
        return {dest_buffer, dest_buffer_size, owns_buffer};
    }

    /**
     * Creates a copy of this object.
     * The returned copy is completely independent of the original object.
     */
    [[nodiscard]] StreamTrade copy() const noexcept
    {
        size_t size = fastbin_binary_size();
        auto dest_buffer = new std::byte[size];
        std::memcpy(dest_buffer, buffer, size);
        return {dest_buffer, size, true};
    }
};

// Type traits
template <>
struct is_variable_size<StreamTrade>
{
    static constexpr bool value = false;
};
}; // namespace my_models

inline std::ostream& operator<<(std::ostream& os, const my_models::StreamTrade& obj)
{
    os << "[my_models::StreamTrade size=" << obj.fastbin_binary_size() << " bytes]\n";
    os << "    server_time: " << obj.server_time() << "\n";
    os << "    recv_time: " << obj.recv_time() << "\n";
    os << "    symbol: " << std::string(obj.symbol()) << "\n";
    os << "    fill_time: " << obj.fill_time() << "\n";
    os << "    side: " << obj.side() << "\n";
    os << "    price: " << obj.price() << "\n";
    os << "    price_chg_dir: " << obj.price_chg_dir() << "\n";
    os << "    size: " << obj.size() << "\n";
    os << "    trade_id: " << std::string(obj.trade_id()) << "\n";
    os << "    block_trade: " << (obj.block_trade() ? "true" : "false") << "\n";
    return os;
}
