#pragma once

#include <cstddef>
#include <cassert>
#include <ostream>
#include <span>
#include <cstdint>
#include <string_view>
#include "OrderbookType.hpp"

namespace my_models
{
/**
 * https://bybit-exchange.github.io/docs/v5/websocket/public/orderbook
 *
 * ------------------------------------------------------------
 *
 * Binary serializable data container generated by `fastbin`.
 * 
 * This container has variable size.
 * All setter methods starting from the first variable-sized member and afterwards MUST be called in order.
 *
 * Fields in order
 * ===============
 * - `server_time::std::int64_t` (fixed)
 * - `recv_time::std::int64_t` (fixed)
 * - `cts::std::int64_t`      (fixed)
 * - `type::OrderbookType`    (fixed)
 * - `depth::std::uint16_t`   (fixed)
 * - `symbol::std::string_view` (variable)
 * - `update_id::std::uint64_t` (fixed)
 * - `seq_num::std::uint64_t` (fixed)
 * - `bid_prices::std::span<double>` (variable)
 * - `bid_quantities::std::span<double>` (variable)
 * - `ask_prices::std::span<double>` (variable)
 * - `ask_quantities::std::span<double>` (variable)
 *
 * The `finalize()` method MUST be called after all setter methods have been called.
 * 
 * It is the responsibility of the caller to ensure that the buffer is
 * large enough to hold all data.
 */
struct StreamOrderbook
{
    std::byte* buffer{nullptr};
    size_t buffer_size{0};
    bool owns_buffer{false};

    explicit StreamOrderbook(std::byte* buffer, size_t binary_size, bool owns_buffer) noexcept
        : buffer(buffer), buffer_size(binary_size), owns_buffer(owns_buffer)
    {
    }

    explicit StreamOrderbook(std::span<std::byte> buffer, bool owns_buffer) noexcept
        : StreamOrderbook(buffer.data(), buffer.size(), owns_buffer)
    {
    }

    ~StreamOrderbook() noexcept
    {
        if (owns_buffer && buffer != nullptr)
        {
            delete[] buffer;
            buffer = nullptr;
        }
    }

    // disable copy
    StreamOrderbook(const StreamOrderbook&) = delete;
    StreamOrderbook& operator=(const StreamOrderbook&) = delete;

    // enable move
    StreamOrderbook(StreamOrderbook&& other) noexcept
        : buffer(other.buffer), buffer_size(other.buffer_size), owns_buffer(other.owns_buffer)
    {
        other.buffer = nullptr;
        other.buffer_size = 0;
    }
    StreamOrderbook& operator=(StreamOrderbook&& other) noexcept
    {
        if (this != &other)
        {
            if (owns_buffer && buffer != nullptr)
               delete[] buffer;
            buffer = other.buffer;
            buffer_size = other.buffer_size;
            owns_buffer = other.owns_buffer;
            other.buffer = nullptr;
            other.buffer_size = 0;
            other.owns_buffer = false;
        }
        return *this;
    }

    // Field: server_time [std::int64_t]

    inline std::int64_t server_time() const noexcept
    {
        return *reinterpret_cast<const std::int64_t*>(buffer + _server_time_offset());
    }

    inline void server_time(const std::int64_t value) noexcept
    {
        *reinterpret_cast<std::int64_t*>(buffer + _server_time_offset()) = value;
    }

    constexpr inline size_t _server_time_offset() const noexcept
    {
        return 8;
    }

    constexpr inline size_t _server_time_size_aligned() const noexcept
    {
        return 8;
    }

    // Field: recv_time [std::int64_t]

    inline std::int64_t recv_time() const noexcept
    {
        return *reinterpret_cast<const std::int64_t*>(buffer + _recv_time_offset());
    }

    inline void recv_time(const std::int64_t value) noexcept
    {
        *reinterpret_cast<std::int64_t*>(buffer + _recv_time_offset()) = value;
    }

    constexpr inline size_t _recv_time_offset() const noexcept
    {
        return 16;
    }

    constexpr inline size_t _recv_time_size_aligned() const noexcept
    {
        return 8;
    }

    // Field: cts [std::int64_t]

    inline std::int64_t cts() const noexcept
    {
        return *reinterpret_cast<const std::int64_t*>(buffer + _cts_offset());
    }

    inline void cts(const std::int64_t value) noexcept
    {
        *reinterpret_cast<std::int64_t*>(buffer + _cts_offset()) = value;
    }

    constexpr inline size_t _cts_offset() const noexcept
    {
        return 24;
    }

    constexpr inline size_t _cts_size_aligned() const noexcept
    {
        return 8;
    }

    // Field: type [OrderbookType]

    inline OrderbookType type() const noexcept
    {
        return static_cast<OrderbookType>(*reinterpret_cast<const OrderbookType*>(buffer + _type_offset()));
    }

    inline void type(const OrderbookType value) noexcept
    {
        *reinterpret_cast<OrderbookType*>(buffer + _type_offset()) = static_cast<OrderbookType>(value);
    }

    constexpr inline size_t _type_offset() const noexcept
    {
        return 32;
    }

    constexpr inline size_t _type_size_aligned() const noexcept
    {
        return 8;
    }

    // Field: depth [std::uint16_t]

    inline std::uint16_t depth() const noexcept
    {
        return *reinterpret_cast<const std::uint16_t*>(buffer + _depth_offset());
    }

    inline void depth(const std::uint16_t value) noexcept
    {
        *reinterpret_cast<std::uint16_t*>(buffer + _depth_offset()) = value;
    }

    constexpr inline size_t _depth_offset() const noexcept
    {
        return 40;
    }

    constexpr inline size_t _depth_size_aligned() const noexcept
    {
        return 8;
    }

    // Field: symbol [std::string_view]

    inline std::string_view symbol() const noexcept
    {
        size_t n_bytes = _symbol_size_unaligned() - 8;
        size_t count = n_bytes;
        auto ptr = reinterpret_cast<const char*>(buffer + _symbol_offset() + 8);
        return std::string_view(ptr, count);
    }

    inline void symbol(const std::string_view value) noexcept
    {
        size_t offset = _symbol_offset();
        size_t contents_size = value.size() * 1;
        size_t unaligned_size = 8 + contents_size;
        size_t aligned_size = (unaligned_size + 7) & ~7;
        size_t aligned_diff = aligned_size - unaligned_size;
        size_t aligned_size_high = aligned_size | (aligned_diff << 56);
        *reinterpret_cast<size_t*>(buffer + offset) = aligned_size_high;
        auto dest_ptr = reinterpret_cast<std::byte*>(buffer + offset + 8);
        auto src_ptr = reinterpret_cast<const std::byte*>(value.data());
        std::copy(src_ptr, src_ptr + contents_size, dest_ptr);
    }

    constexpr inline size_t _symbol_offset() const noexcept
    {
        return 48;
    }

    constexpr inline size_t _symbol_size_aligned() const noexcept
    {
        size_t stored_size = *reinterpret_cast<size_t*>(buffer + _symbol_offset());
        size_t aligned_size = stored_size & 0x00FFFFFFFFFFFFFF;
        return aligned_size;
    }

    constexpr inline size_t _symbol_size_unaligned() const noexcept
    {
        size_t stored_size = *reinterpret_cast<size_t*>(buffer + _symbol_offset());
        size_t aligned_diff = stored_size >> 56;
        size_t aligned_size = stored_size & 0x00FFFFFFFFFFFFFF;
        return aligned_size - aligned_diff;
    }

    // Field: update_id [std::uint64_t]

    inline std::uint64_t update_id() const noexcept
    {
        return *reinterpret_cast<const std::uint64_t*>(buffer + _update_id_offset());
    }

    inline void update_id(const std::uint64_t value) noexcept
    {
        *reinterpret_cast<std::uint64_t*>(buffer + _update_id_offset()) = value;
    }

    constexpr inline size_t _update_id_offset() const noexcept
    {
        return _symbol_offset() + _symbol_size_aligned();
    }

    constexpr inline size_t _update_id_size_aligned() const noexcept
    {
        return 8;
    }

    // Field: seq_num [std::uint64_t]

    inline std::uint64_t seq_num() const noexcept
    {
        return *reinterpret_cast<const std::uint64_t*>(buffer + _seq_num_offset());
    }

    inline void seq_num(const std::uint64_t value) noexcept
    {
        *reinterpret_cast<std::uint64_t*>(buffer + _seq_num_offset()) = value;
    }

    constexpr inline size_t _seq_num_offset() const noexcept
    {
        return _update_id_offset() + _update_id_size_aligned();
    }

    constexpr inline size_t _seq_num_size_aligned() const noexcept
    {
        return 8;
    }

    // Field: bid_prices [std::span<double>]

    inline std::span<double> bid_prices() const noexcept
    {
        size_t n_bytes = _bid_prices_size_unaligned() - 8;
        size_t count = n_bytes >> 3;
        auto ptr = reinterpret_cast<double*>(buffer + _bid_prices_offset() + 8);
        return std::span<double>(ptr, count);
    }

    inline void bid_prices(const std::span<double> value) noexcept
    {
        size_t offset = _bid_prices_offset();
        size_t contents_size = value.size() * 8;
        *reinterpret_cast<size_t*>(buffer + offset) = 8 + contents_size;
        auto dest_ptr = reinterpret_cast<std::byte*>(buffer + offset + 8);
        auto src_ptr = reinterpret_cast<const std::byte*>(value.data());
        std::copy(src_ptr, src_ptr + contents_size, dest_ptr);
    }

    constexpr inline size_t _bid_prices_offset() const noexcept
    {
        return _seq_num_offset() + _seq_num_size_aligned();
    }

    constexpr inline size_t _bid_prices_size_aligned() const noexcept
    {
        size_t stored_size = *reinterpret_cast<size_t*>(buffer + _bid_prices_offset());
        return stored_size;
    }

    constexpr inline size_t _bid_prices_size_unaligned() const noexcept
    {
        size_t stored_size = *reinterpret_cast<size_t*>(buffer + _bid_prices_offset());
        return stored_size;
    }

    // Field: bid_quantities [std::span<double>]

    inline std::span<double> bid_quantities() const noexcept
    {
        size_t n_bytes = _bid_quantities_size_unaligned() - 8;
        size_t count = n_bytes >> 3;
        auto ptr = reinterpret_cast<double*>(buffer + _bid_quantities_offset() + 8);
        return std::span<double>(ptr, count);
    }

    inline void bid_quantities(const std::span<double> value) noexcept
    {
        size_t offset = _bid_quantities_offset();
        size_t contents_size = value.size() * 8;
        *reinterpret_cast<size_t*>(buffer + offset) = 8 + contents_size;
        auto dest_ptr = reinterpret_cast<std::byte*>(buffer + offset + 8);
        auto src_ptr = reinterpret_cast<const std::byte*>(value.data());
        std::copy(src_ptr, src_ptr + contents_size, dest_ptr);
    }

    constexpr inline size_t _bid_quantities_offset() const noexcept
    {
        return _bid_prices_offset() + _bid_prices_size_aligned();
    }

    constexpr inline size_t _bid_quantities_size_aligned() const noexcept
    {
        size_t stored_size = *reinterpret_cast<size_t*>(buffer + _bid_quantities_offset());
        return stored_size;
    }

    constexpr inline size_t _bid_quantities_size_unaligned() const noexcept
    {
        size_t stored_size = *reinterpret_cast<size_t*>(buffer + _bid_quantities_offset());
        return stored_size;
    }

    // Field: ask_prices [std::span<double>]

    inline std::span<double> ask_prices() const noexcept
    {
        size_t n_bytes = _ask_prices_size_unaligned() - 8;
        size_t count = n_bytes >> 3;
        auto ptr = reinterpret_cast<double*>(buffer + _ask_prices_offset() + 8);
        return std::span<double>(ptr, count);
    }

    inline void ask_prices(const std::span<double> value) noexcept
    {
        size_t offset = _ask_prices_offset();
        size_t contents_size = value.size() * 8;
        *reinterpret_cast<size_t*>(buffer + offset) = 8 + contents_size;
        auto dest_ptr = reinterpret_cast<std::byte*>(buffer + offset + 8);
        auto src_ptr = reinterpret_cast<const std::byte*>(value.data());
        std::copy(src_ptr, src_ptr + contents_size, dest_ptr);
    }

    constexpr inline size_t _ask_prices_offset() const noexcept
    {
        return _bid_quantities_offset() + _bid_quantities_size_aligned();
    }

    constexpr inline size_t _ask_prices_size_aligned() const noexcept
    {
        size_t stored_size = *reinterpret_cast<size_t*>(buffer + _ask_prices_offset());
        return stored_size;
    }

    constexpr inline size_t _ask_prices_size_unaligned() const noexcept
    {
        size_t stored_size = *reinterpret_cast<size_t*>(buffer + _ask_prices_offset());
        return stored_size;
    }

    // Field: ask_quantities [std::span<double>]

    inline std::span<double> ask_quantities() const noexcept
    {
        size_t n_bytes = _ask_quantities_size_unaligned() - 8;
        size_t count = n_bytes >> 3;
        auto ptr = reinterpret_cast<double*>(buffer + _ask_quantities_offset() + 8);
        return std::span<double>(ptr, count);
    }

    inline void ask_quantities(const std::span<double> value) noexcept
    {
        size_t offset = _ask_quantities_offset();
        size_t contents_size = value.size() * 8;
        *reinterpret_cast<size_t*>(buffer + offset) = 8 + contents_size;
        auto dest_ptr = reinterpret_cast<std::byte*>(buffer + offset + 8);
        auto src_ptr = reinterpret_cast<const std::byte*>(value.data());
        std::copy(src_ptr, src_ptr + contents_size, dest_ptr);
    }

    constexpr inline size_t _ask_quantities_offset() const noexcept
    {
        return _ask_prices_offset() + _ask_prices_size_aligned();
    }

    constexpr inline size_t _ask_quantities_size_aligned() const noexcept
    {
        size_t stored_size = *reinterpret_cast<size_t*>(buffer + _ask_quantities_offset());
        return stored_size;
    }

    constexpr inline size_t _ask_quantities_size_unaligned() const noexcept
    {
        size_t stored_size = *reinterpret_cast<size_t*>(buffer + _ask_quantities_offset());
        return stored_size;
    }

    // --------------------------------------------------------------------------------

    constexpr inline size_t fastbin_calc_binary_size() const noexcept
    {
        return _ask_quantities_offset() + _ask_quantities_size_aligned();
    }

    /**
     * Returns the stored (aligned) binary size of the object.
     * This function should only be called after `fastbin_finalize()`.
     */
    constexpr inline size_t fastbin_binary_size() const noexcept
    {
        return *reinterpret_cast<size_t*>(buffer);
    }

    /**
     * Finalizes the object by writing the binary size to the beginning of its buffer.
     * After calling this function, the underlying buffer can be used for serialization.
     * To get the actual buffer size, call `fastbin_binary_size()`.
     */
    inline void fastbin_finalize() const noexcept
    {
        *reinterpret_cast<size_t*>(buffer) = fastbin_calc_binary_size();
    }
};
}; // namespace my_models

inline std::ostream& operator<<(std::ostream& os, const my_models::StreamOrderbook& obj)
{
    os << "[my_models::StreamOrderbook size=" << obj.fastbin_binary_size() << " bytes]\n";
    os << "    server_time: " << obj.server_time() << "\n";
    os << "    recv_time: " << obj.recv_time() << "\n";
    os << "    cts: " << obj.cts() << "\n";
    os << "    type: " << obj.type() << "\n";
    os << "    depth: " << obj.depth() << "\n";
    os << "    symbol: " << std::string(obj.symbol()) << "\n";
    os << "    update_id: " << obj.update_id() << "\n";
    os << "    seq_num: " << obj.seq_num() << "\n";
    os << "    bid_prices: " << "[vector<float64> count=" << obj.bid_prices().size() << "]" << "\n";
    os << "    bid_quantities: " << "[vector<float64> count=" << obj.bid_quantities().size() << "]" << "\n";
    os << "    ask_prices: " << "[vector<float64> count=" << obj.ask_prices().size() << "]" << "\n";
    os << "    ask_quantities: " << "[vector<float64> count=" << obj.ask_quantities().size() << "]" << "\n";
    return os;
}
