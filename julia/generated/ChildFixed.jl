import Base.show
import Base.finalizer

"""
Binary serializable data container generated by `fastbin`.

This container has fixed size of 16 bytes.

The `fastbin_finalize!()` method MUST be called after all setter methods have been called.

It is the responsibility of the caller to ensure that the buffer is
large enough to hold all data.
"""
mutable struct ChildFixed
    buffer::Ptr{UInt8}
    buffer_size::UInt64
    owns_buffer::Bool

    function ChildFixed(buffer::Ptr{UInt8}, buffer_size::UInt64, owns_buffer::Bool)
        new(buffer, buffer_size, owns_buffer)
    end

    function ChildFixed(buffer_size::Integer)
        buffer = reinterpret(Ptr{UInt8}, Base.Libc.malloc(buffer_size))
        obj = new(buffer, buffer_size, true)
        finalizer(_finalize!, obj)
    end
end

_finalize!(obj::ChildFixed) = Base.Libc.free(obj.buffer)


# Member: field1::Int32

@inline function field1(obj::ChildFixed)::Int32
    return unsafe_load(reinterpret(Ptr{Int32}, obj.buffer + _field1_offset(obj)))
end

@inline function field1!(obj::ChildFixed, value::Int32)
    unsafe_store!(reinterpret(Ptr{Int32}, obj.buffer + _field1_offset(obj)), value)
end

@inline function _field1_offset(obj::ChildFixed)::UInt64
    return 0
end

@inline function _field1_size_aligned(obj::ChildFixed)::UInt64
    return 8
end

@inline function _field1_calc_size_aligned(::Type{ChildFixed}, value::Int32)::UInt64
    return 8
end


# Member: field2::Int32

@inline function field2(obj::ChildFixed)::Int32
    return unsafe_load(reinterpret(Ptr{Int32}, obj.buffer + _field2_offset(obj)))
end

@inline function field2!(obj::ChildFixed, value::Int32)
    unsafe_store!(reinterpret(Ptr{Int32}, obj.buffer + _field2_offset(obj)), value)
end

@inline function _field2_offset(obj::ChildFixed)::UInt64
    return 8
end

@inline function _field2_size_aligned(obj::ChildFixed)::UInt64
    return 8
end

@inline function _field2_calc_size_aligned(::Type{ChildFixed}, value::Int32)::UInt64
    return 8
end


# --------------------------------------------------------------------

@inline function fastbin_calc_binary_size(obj::ChildFixed)::UInt64
    return 16
end

@inline function fastbin_calc_binary_size(::Type{ChildFixed})
    16
end

"""
Returns the stored (aligned) binary size of the object.
This function should only be called after `fastbin_finalize!(obj)`.
"""
@inline function fastbin_binary_size(obj::ChildFixed)::UInt64
    return 16
end

"""
Finalizes the object by writing the binary size to the beginning of its buffer.
After calling this function, the underlying buffer can be used for serialization.
To get the actual buffer size, call `fastbin_binary_size(obj)`.
"""
@inline function fastbin_finalize!(obj::ChildFixed)
end

function show(io::IO, obj::ChildFixed)
    print(io, "[my_models::ChildFixed]")
    print(io, "\n    field1: ")
    print(io, field1(obj))
    print(io, "\n    field2: ")
    print(io, field2(obj))
    println(io)
end
