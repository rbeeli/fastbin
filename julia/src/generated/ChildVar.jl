import Base.show
import Base.finalizer
using StringViews

"""
Binary serializable data container generated by `fastbin`.

This container has variable size.
All setter methods starting from the first variable-sized member and afterwards MUST be called in order.

Members in order
================
- `field1::Int32`          (fixed)
- `field2::StringView`     (variable)

The `fastbin_finalize!()` method MUST be called after all setter methods have been called.

It is the responsibility of the caller to ensure that the buffer is
large enough to hold all data.
"""
mutable struct ChildVar
    buffer::Ptr{UInt8}
    buffer_size::UInt64
    owns_buffer::Bool

    function ChildVar(buffer::Ptr{UInt8}, buffer_size::Integer, owns_buffer::Bool)
        owns_buffer || (@assert iszero(UInt(buffer) & 0x7) "Buffer not 8 byte aligned")
        new(buffer, UInt64(buffer_size), owns_buffer)
    end

    function ChildVar(buffer_size::Integer)
        buffer = reinterpret(Ptr{UInt8}, Base.Libc.malloc(buffer_size))
        obj = new(buffer, buffer_size, true)
        finalizer(_finalize!, obj)
    end
end

_finalize!(obj::ChildVar) = Base.Libc.free(obj.buffer)


# Member: field1::Int32

@inline function field1(obj::ChildVar)::Int32
    return unsafe_load(reinterpret(Ptr{Int32}, obj.buffer + _field1_offset(obj)))
end

@inline function field1!(obj::ChildVar, value::Int32)
    unsafe_store!(reinterpret(Ptr{Int32}, obj.buffer + _field1_offset(obj)), value)
end

@inline function _field1_offset(obj::ChildVar)::UInt64
    return 8
end

@inline function _field1_size_aligned(obj::ChildVar)::UInt64
    return 8
end

@inline function _field1_calc_size_aligned(::Type{ChildVar}, value::Int32)::UInt64
    return 8
end


# Member: field2::StringView

@inline function field2(obj::ChildVar)::StringView
    ptr::Ptr{UInt8} = reinterpret(Ptr{UInt8}, obj.buffer + _field2_offset(obj))
    unaligned_size::UInt64 = _field2_size_unaligned(obj)
    n_bytes::UInt64 = unaligned_size - 8
    count::UInt64 = n_bytes
    return StringView(unsafe_wrap(Vector{UInt8}, ptr + 8, count, own=false))
end

@inline function field2!(obj::ChildVar, value::T) where {T<:AbstractString}
    offset::UInt64 = _field2_offset(obj)
    contents_size::UInt64 = length(value) * 1
    unaligned_size::UInt64 = 8 + contents_size
    aligned_size::UInt64 = (unaligned_size + 7) & ~7
    aligned_diff::UInt64 = aligned_size - unaligned_size
    aligned_size_high::UInt64 = aligned_size | (aligned_diff << 56)
    unsafe_store!(reinterpret(Ptr{UInt64}, obj.buffer + offset), aligned_size_high)
    dest_ptr::Ptr{UInt8} = obj.buffer + offset + 8
    src_ptr::Ptr{UInt8} = reinterpret(Ptr{UInt8}, pointer(value))
    unsafe_copyto!(dest_ptr, src_ptr, contents_size)
end

@inline function _field2_offset(obj::ChildVar)::UInt64
    return 16
end

@inline function _field2_size_aligned(obj::ChildVar)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _field2_offset(obj)))
    aligned_size::UInt64 = stored_size & 0x00FFFFFFFFFFFFFF
    return aligned_size
end

@inline function _field2_calc_size_aligned(::Type{ChildVar}, value::T)::UInt64 where {T<:AbstractString}
    contents_size::UInt64 = length(value) * 1
    unaligned_size::UInt64 = 8 + contents_size
    return (unaligned_size + 7) & ~7
end

@inline function _field2_size_unaligned(obj::ChildVar)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _field2_offset(obj)))
    aligned_diff::UInt64 = stored_size >> 56
    aligned_size::UInt64 = stored_size & 0x00FFFFFFFFFFFFFF
    return aligned_size - aligned_diff
end

# --------------------------------------------------------------------

@inline function fastbin_calc_binary_size(obj::ChildVar)::UInt64
    return _field2_offset(obj) + _field2_size_aligned(obj)
end

@inline function fastbin_calc_binary_size(::Type{ChildVar},
    field2::StringView
)
    return 16 +
        _field2_calc_size_aligned(ChildVar, field2)
end

"""
Returns the stored (aligned) binary size of the object.
This function should only be called after `fastbin_finalize!(obj)`.
"""
@inline function fastbin_binary_size(obj::ChildVar)::UInt64
    return unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer))
end

"""
Finalizes the object by writing the binary size to the beginning of its buffer.
After calling this function, the underlying buffer can be used for serialization.
To get the actual buffer size, call `fastbin_binary_size(obj)`.
"""
@inline function fastbin_finalize!(obj::ChildVar)
    unsafe_store!(reinterpret(Ptr{UInt64}, obj.buffer), fastbin_calc_binary_size(obj))
    nothing
end

function show(io::IO, obj::ChildVar)
    print(io, "[my_models::ChildVar]")
    print(io, "\n    field1: ")
    print(io, field1(obj))
    print(io, "\n    field2: ")
    print(io, field2(obj))
    println(io)
end
