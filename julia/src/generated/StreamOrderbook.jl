import Base.show
import Base.finalizer
using StringViews

"""
https://bybit-exchange.github.io/docs/v5/websocket/public/orderbook

------------------------------------------------------------

Binary serializable data container generated by `fastbin`.

This container has variable size.
All setter methods starting from the first variable-sized member and afterwards MUST be called in order.

Members in order
================
- `server_time::Int64`     (fixed)
- `recv_time::Int64`       (fixed)
- `cts::Int64`             (fixed)
- `type::OrderbookType.T`  (fixed)
- `depth::UInt16`          (fixed)
- `symbol::StringView`     (variable)
- `update_id::UInt64`      (fixed)
- `seq_num::UInt64`        (fixed)
- `bid_prices::Vector{Float64}` (variable)
- `bid_quantities::Vector{Float64}` (variable)
- `ask_prices::Vector{Float64}` (variable)
- `ask_quantities::Vector{Float64}` (variable)

The `fastbin_finalize!()` method MUST be called after all setter methods have been called.

It is the responsibility of the caller to ensure that the buffer is
large enough to hold all data.
"""
mutable struct StreamOrderbook
    buffer::Ptr{UInt8}
    buffer_size::UInt64
    owns_buffer::Bool

    function StreamOrderbook(buffer::Ptr{UInt8}, buffer_size::Integer, owns_buffer::Bool)
        owns_buffer || (@assert iszero(UInt(buffer) & 0x7) "Buffer not 8 byte aligned")
        new(buffer, UInt64(buffer_size), owns_buffer)
    end

    function StreamOrderbook(buffer_size::Integer)
        buffer = reinterpret(Ptr{UInt8}, Base.Libc.malloc(buffer_size))
        obj = new(buffer, buffer_size, true)
        finalizer(_finalize!, obj)
    end
end

_finalize!(obj::StreamOrderbook) = Base.Libc.free(obj.buffer)


# Member: server_time::Int64
@inline function Base.getproperty(obj::StreamOrderbook, ::Val{:server_time})::Int64
    return unsafe_load(reinterpret(Ptr{Int64}, obj.buffer + _server_time_offset(obj)))
end

@inline server_time(obj::StreamOrderbook)::Int64 = obj.server_time

@inline function Base.setproperty!(obj::StreamOrderbook, ::Val{:server_time}, value::Int64)
    unsafe_store!(reinterpret(Ptr{Int64}, obj.buffer + _server_time_offset(obj)), value)
end

@inline function server_time!(obj::StreamOrderbook, value::Int64)
    obj.server_time = value
end

@inline function _server_time_offset(obj::StreamOrderbook)::UInt64
    return 8
end

@inline function _server_time_size_aligned(obj::StreamOrderbook)::UInt64
    return 8
end

@inline function _server_time_calc_size_aligned(::Type{StreamOrderbook}, value::Int64)::UInt64
    return 8
end


# Member: recv_time::Int64
@inline function Base.getproperty(obj::StreamOrderbook, ::Val{:recv_time})::Int64
    return unsafe_load(reinterpret(Ptr{Int64}, obj.buffer + _recv_time_offset(obj)))
end

@inline recv_time(obj::StreamOrderbook)::Int64 = obj.recv_time

@inline function Base.setproperty!(obj::StreamOrderbook, ::Val{:recv_time}, value::Int64)
    unsafe_store!(reinterpret(Ptr{Int64}, obj.buffer + _recv_time_offset(obj)), value)
end

@inline function recv_time!(obj::StreamOrderbook, value::Int64)
    obj.recv_time = value
end

@inline function _recv_time_offset(obj::StreamOrderbook)::UInt64
    return 16
end

@inline function _recv_time_size_aligned(obj::StreamOrderbook)::UInt64
    return 8
end

@inline function _recv_time_calc_size_aligned(::Type{StreamOrderbook}, value::Int64)::UInt64
    return 8
end


# Member: cts::Int64
@inline function Base.getproperty(obj::StreamOrderbook, ::Val{:cts})::Int64
    return unsafe_load(reinterpret(Ptr{Int64}, obj.buffer + _cts_offset(obj)))
end

@inline cts(obj::StreamOrderbook)::Int64 = obj.cts

@inline function Base.setproperty!(obj::StreamOrderbook, ::Val{:cts}, value::Int64)
    unsafe_store!(reinterpret(Ptr{Int64}, obj.buffer + _cts_offset(obj)), value)
end

@inline function cts!(obj::StreamOrderbook, value::Int64)
    obj.cts = value
end

@inline function _cts_offset(obj::StreamOrderbook)::UInt64
    return 24
end

@inline function _cts_size_aligned(obj::StreamOrderbook)::UInt64
    return 8
end

@inline function _cts_calc_size_aligned(::Type{StreamOrderbook}, value::Int64)::UInt64
    return 8
end


# Member: type::OrderbookType.T
@inline function Base.getproperty(obj::StreamOrderbook, ::Val{:type})::OrderbookType.T
    return unsafe_load(reinterpret(Ptr{OrderbookType.T}, obj.buffer + _type_offset(obj)))
end

@inline type(obj::StreamOrderbook)::OrderbookType.T = obj.type

@inline function Base.setproperty!(obj::StreamOrderbook, ::Val{:type}, value::OrderbookType.T)
    unsafe_store!(reinterpret(Ptr{OrderbookType.T}, obj.buffer + _type_offset(obj)), value)
end

@inline function type!(obj::StreamOrderbook, value::OrderbookType.T)
    obj.type = value
end

@inline function _type_offset(obj::StreamOrderbook)::UInt64
    return 32
end

@inline function _type_size_aligned(obj::StreamOrderbook)::UInt64
    return 8
end

@inline function _type_calc_size_aligned(::Type{StreamOrderbook}, value::OrderbookType.T)::UInt64
    return 8
end


# Member: depth::UInt16
@inline function Base.getproperty(obj::StreamOrderbook, ::Val{:depth})::UInt16
    return unsafe_load(reinterpret(Ptr{UInt16}, obj.buffer + _depth_offset(obj)))
end

@inline depth(obj::StreamOrderbook)::UInt16 = obj.depth

@inline function Base.setproperty!(obj::StreamOrderbook, ::Val{:depth}, value::UInt16)
    unsafe_store!(reinterpret(Ptr{UInt16}, obj.buffer + _depth_offset(obj)), value)
end

@inline function depth!(obj::StreamOrderbook, value::UInt16)
    obj.depth = value
end

@inline function _depth_offset(obj::StreamOrderbook)::UInt64
    return 40
end

@inline function _depth_size_aligned(obj::StreamOrderbook)::UInt64
    return 8
end

@inline function _depth_calc_size_aligned(::Type{StreamOrderbook}, value::UInt16)::UInt64
    return 8
end


# Member: symbol::StringView
@inline function Base.getproperty(obj::StreamOrderbook, ::Val{:symbol})::StringView
    ptr::Ptr{UInt8} = reinterpret(Ptr{UInt8}, obj.buffer + _symbol_offset(obj))
    unaligned_size::UInt64 = _symbol_size_unaligned(obj)
    n_bytes::UInt64 = unaligned_size - 8
    count::UInt64 = n_bytes
    return StringView(unsafe_wrap(Vector{UInt8}, ptr + 8, count, own=false))
end

@inline symbol(obj::StreamOrderbook)::StringView = obj.symbol

@inline function Base.setproperty!(obj::StreamOrderbook, ::Val{:symbol}, value::AbstractString)
    offset::UInt64 = _symbol_offset(obj)
    contents_size::UInt64 = length(value) * 1
    unaligned_size::UInt64 = 8 + contents_size
    aligned_size::UInt64 = (unaligned_size + 7) & ~7
    aligned_diff::UInt64 = aligned_size - unaligned_size
    aligned_size_high::UInt64 = aligned_size | (aligned_diff << 56)
    unsafe_store!(reinterpret(Ptr{UInt64}, obj.buffer + offset), aligned_size_high)
    dest_ptr::Ptr{UInt8} = obj.buffer + offset + 8
    src_ptr::Ptr{UInt8} = reinterpret(Ptr{UInt8}, pointer(value))
    unsafe_copyto!(dest_ptr, src_ptr, contents_size)
end

@inline function symbol!(obj::StreamOrderbook, value::AbstractString)
    obj.symbol = value
end

@inline function _symbol_offset(obj::StreamOrderbook)::UInt64
    return 48
end

@inline function _symbol_size_aligned(obj::StreamOrderbook)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _symbol_offset(obj)))
    aligned_size::UInt64 = stored_size & 0x00FFFFFFFFFFFFFF
    return aligned_size
end

@inline function _symbol_calc_size_aligned(::Type{StreamOrderbook}, value::AbstractString)::UInt64
    contents_size::UInt64 = length(value) * 1
    unaligned_size::UInt64 = 8 + contents_size
    return (unaligned_size + 7) & ~7
end

@inline function _symbol_size_unaligned(obj::StreamOrderbook)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _symbol_offset(obj)))
    aligned_diff::UInt64 = stored_size >> 56
    aligned_size::UInt64 = stored_size & 0x00FFFFFFFFFFFFFF
    return aligned_size - aligned_diff
end

# Member: update_id::UInt64
@inline function Base.getproperty(obj::StreamOrderbook, ::Val{:update_id})::UInt64
    return unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _update_id_offset(obj)))
end

@inline update_id(obj::StreamOrderbook)::UInt64 = obj.update_id

@inline function Base.setproperty!(obj::StreamOrderbook, ::Val{:update_id}, value::UInt64)
    unsafe_store!(reinterpret(Ptr{UInt64}, obj.buffer + _update_id_offset(obj)), value)
end

@inline function update_id!(obj::StreamOrderbook, value::UInt64)
    obj.update_id = value
end

@inline function _update_id_offset(obj::StreamOrderbook)::UInt64
    return _symbol_offset(obj) + _symbol_size_aligned(obj)
end

@inline function _update_id_size_aligned(obj::StreamOrderbook)::UInt64
    return 8
end

@inline function _update_id_calc_size_aligned(::Type{StreamOrderbook}, value::UInt64)::UInt64
    return 8
end


# Member: seq_num::UInt64
@inline function Base.getproperty(obj::StreamOrderbook, ::Val{:seq_num})::UInt64
    return unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _seq_num_offset(obj)))
end

@inline seq_num(obj::StreamOrderbook)::UInt64 = obj.seq_num

@inline function Base.setproperty!(obj::StreamOrderbook, ::Val{:seq_num}, value::UInt64)
    unsafe_store!(reinterpret(Ptr{UInt64}, obj.buffer + _seq_num_offset(obj)), value)
end

@inline function seq_num!(obj::StreamOrderbook, value::UInt64)
    obj.seq_num = value
end

@inline function _seq_num_offset(obj::StreamOrderbook)::UInt64
    return _update_id_offset(obj) + _update_id_size_aligned(obj)
end

@inline function _seq_num_size_aligned(obj::StreamOrderbook)::UInt64
    return 8
end

@inline function _seq_num_calc_size_aligned(::Type{StreamOrderbook}, value::UInt64)::UInt64
    return 8
end


# Member: bid_prices::Vector{Float64}
@inline function Base.getproperty(obj::StreamOrderbook, ::Val{:bid_prices})::Vector{Float64}
    ptr::Ptr{Float64} = reinterpret(Ptr{Float64}, obj.buffer + _bid_prices_offset(obj))
    unaligned_size::UInt64 = _bid_prices_size_unaligned(obj)
    n_bytes::UInt64 = unaligned_size - 8
    count::UInt64 = n_bytes >> 3
    return unsafe_wrap(Vector{Float64}, ptr + 8, count, own=false)
end

@inline bid_prices(obj::StreamOrderbook)::Vector{Float64} = obj.bid_prices

@inline function Base.setproperty!(obj::StreamOrderbook, ::Val{:bid_prices}, value::Vector{Float64})
    offset::UInt64 = _bid_prices_offset(obj)
    contents_size::UInt64 = length(value) * 8
    unsafe_store!(reinterpret(Ptr{UInt64}, obj.buffer + offset), 8 + contents_size)
    dest_ptr::Ptr{UInt8} = obj.buffer + offset + 8
    src_ptr::Ptr{UInt8} = reinterpret(Ptr{UInt8}, pointer(value))
    unsafe_copyto!(dest_ptr, src_ptr, contents_size)
end

@inline function bid_prices!(obj::StreamOrderbook, value::Vector{Float64})
    obj.bid_prices = value
end

@inline function _bid_prices_offset(obj::StreamOrderbook)::UInt64
    return _seq_num_offset(obj) + _seq_num_size_aligned(obj)
end

@inline function _bid_prices_size_aligned(obj::StreamOrderbook)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _bid_prices_offset(obj)))
    return stored_size
end

@inline function _bid_prices_calc_size_aligned(::Type{StreamOrderbook}, value::Vector{Float64})::UInt64
    contents_size::UInt64 = length(value) * 8
    return 8 + contents_size
end

@inline function _bid_prices_size_unaligned(obj::StreamOrderbook)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _bid_prices_offset(obj)))
    return stored_size
end

# Member: bid_quantities::Vector{Float64}
@inline function Base.getproperty(obj::StreamOrderbook, ::Val{:bid_quantities})::Vector{Float64}
    ptr::Ptr{Float64} = reinterpret(Ptr{Float64}, obj.buffer + _bid_quantities_offset(obj))
    unaligned_size::UInt64 = _bid_quantities_size_unaligned(obj)
    n_bytes::UInt64 = unaligned_size - 8
    count::UInt64 = n_bytes >> 3
    return unsafe_wrap(Vector{Float64}, ptr + 8, count, own=false)
end

@inline bid_quantities(obj::StreamOrderbook)::Vector{Float64} = obj.bid_quantities

@inline function Base.setproperty!(obj::StreamOrderbook, ::Val{:bid_quantities}, value::Vector{Float64})
    offset::UInt64 = _bid_quantities_offset(obj)
    contents_size::UInt64 = length(value) * 8
    unsafe_store!(reinterpret(Ptr{UInt64}, obj.buffer + offset), 8 + contents_size)
    dest_ptr::Ptr{UInt8} = obj.buffer + offset + 8
    src_ptr::Ptr{UInt8} = reinterpret(Ptr{UInt8}, pointer(value))
    unsafe_copyto!(dest_ptr, src_ptr, contents_size)
end

@inline function bid_quantities!(obj::StreamOrderbook, value::Vector{Float64})
    obj.bid_quantities = value
end

@inline function _bid_quantities_offset(obj::StreamOrderbook)::UInt64
    return _bid_prices_offset(obj) + _bid_prices_size_aligned(obj)
end

@inline function _bid_quantities_size_aligned(obj::StreamOrderbook)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _bid_quantities_offset(obj)))
    return stored_size
end

@inline function _bid_quantities_calc_size_aligned(::Type{StreamOrderbook}, value::Vector{Float64})::UInt64
    contents_size::UInt64 = length(value) * 8
    return 8 + contents_size
end

@inline function _bid_quantities_size_unaligned(obj::StreamOrderbook)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _bid_quantities_offset(obj)))
    return stored_size
end

# Member: ask_prices::Vector{Float64}
@inline function Base.getproperty(obj::StreamOrderbook, ::Val{:ask_prices})::Vector{Float64}
    ptr::Ptr{Float64} = reinterpret(Ptr{Float64}, obj.buffer + _ask_prices_offset(obj))
    unaligned_size::UInt64 = _ask_prices_size_unaligned(obj)
    n_bytes::UInt64 = unaligned_size - 8
    count::UInt64 = n_bytes >> 3
    return unsafe_wrap(Vector{Float64}, ptr + 8, count, own=false)
end

@inline ask_prices(obj::StreamOrderbook)::Vector{Float64} = obj.ask_prices

@inline function Base.setproperty!(obj::StreamOrderbook, ::Val{:ask_prices}, value::Vector{Float64})
    offset::UInt64 = _ask_prices_offset(obj)
    contents_size::UInt64 = length(value) * 8
    unsafe_store!(reinterpret(Ptr{UInt64}, obj.buffer + offset), 8 + contents_size)
    dest_ptr::Ptr{UInt8} = obj.buffer + offset + 8
    src_ptr::Ptr{UInt8} = reinterpret(Ptr{UInt8}, pointer(value))
    unsafe_copyto!(dest_ptr, src_ptr, contents_size)
end

@inline function ask_prices!(obj::StreamOrderbook, value::Vector{Float64})
    obj.ask_prices = value
end

@inline function _ask_prices_offset(obj::StreamOrderbook)::UInt64
    return _bid_quantities_offset(obj) + _bid_quantities_size_aligned(obj)
end

@inline function _ask_prices_size_aligned(obj::StreamOrderbook)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _ask_prices_offset(obj)))
    return stored_size
end

@inline function _ask_prices_calc_size_aligned(::Type{StreamOrderbook}, value::Vector{Float64})::UInt64
    contents_size::UInt64 = length(value) * 8
    return 8 + contents_size
end

@inline function _ask_prices_size_unaligned(obj::StreamOrderbook)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _ask_prices_offset(obj)))
    return stored_size
end

# Member: ask_quantities::Vector{Float64}
@inline function Base.getproperty(obj::StreamOrderbook, ::Val{:ask_quantities})::Vector{Float64}
    ptr::Ptr{Float64} = reinterpret(Ptr{Float64}, obj.buffer + _ask_quantities_offset(obj))
    unaligned_size::UInt64 = _ask_quantities_size_unaligned(obj)
    n_bytes::UInt64 = unaligned_size - 8
    count::UInt64 = n_bytes >> 3
    return unsafe_wrap(Vector{Float64}, ptr + 8, count, own=false)
end

@inline ask_quantities(obj::StreamOrderbook)::Vector{Float64} = obj.ask_quantities

@inline function Base.setproperty!(obj::StreamOrderbook, ::Val{:ask_quantities}, value::Vector{Float64})
    offset::UInt64 = _ask_quantities_offset(obj)
    contents_size::UInt64 = length(value) * 8
    unsafe_store!(reinterpret(Ptr{UInt64}, obj.buffer + offset), 8 + contents_size)
    dest_ptr::Ptr{UInt8} = obj.buffer + offset + 8
    src_ptr::Ptr{UInt8} = reinterpret(Ptr{UInt8}, pointer(value))
    unsafe_copyto!(dest_ptr, src_ptr, contents_size)
end

@inline function ask_quantities!(obj::StreamOrderbook, value::Vector{Float64})
    obj.ask_quantities = value
end

@inline function _ask_quantities_offset(obj::StreamOrderbook)::UInt64
    return _ask_prices_offset(obj) + _ask_prices_size_aligned(obj)
end

@inline function _ask_quantities_size_aligned(obj::StreamOrderbook)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _ask_quantities_offset(obj)))
    return stored_size
end

@inline function _ask_quantities_calc_size_aligned(::Type{StreamOrderbook}, value::Vector{Float64})::UInt64
    contents_size::UInt64 = length(value) * 8
    return 8 + contents_size
end

@inline function _ask_quantities_size_unaligned(obj::StreamOrderbook)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _ask_quantities_offset(obj)))
    return stored_size
end
@inline function Base.getproperty(obj::StreamOrderbook, name::Symbol)
    name === :server_time && return getproperty(obj, Val(:server_time))
    name === :recv_time && return getproperty(obj, Val(:recv_time))
    name === :cts && return getproperty(obj, Val(:cts))
    name === :type && return getproperty(obj, Val(:type))
    name === :depth && return getproperty(obj, Val(:depth))
    name === :symbol && return getproperty(obj, Val(:symbol))
    name === :update_id && return getproperty(obj, Val(:update_id))
    name === :seq_num && return getproperty(obj, Val(:seq_num))
    name === :bid_prices && return getproperty(obj, Val(:bid_prices))
    name === :bid_quantities && return getproperty(obj, Val(:bid_quantities))
    name === :ask_prices && return getproperty(obj, Val(:ask_prices))
    name === :ask_quantities && return getproperty(obj, Val(:ask_quantities))
    getfield(obj, name)
end

@inline function Base.setproperty!(obj::StreamOrderbook, name::Symbol, value)
    name === :server_time && return setproperty!(obj, Val(:server_time), value)
    name === :recv_time && return setproperty!(obj, Val(:recv_time), value)
    name === :cts && return setproperty!(obj, Val(:cts), value)
    name === :type && return setproperty!(obj, Val(:type), value)
    name === :depth && return setproperty!(obj, Val(:depth), value)
    name === :symbol && return setproperty!(obj, Val(:symbol), value)
    name === :update_id && return setproperty!(obj, Val(:update_id), value)
    name === :seq_num && return setproperty!(obj, Val(:seq_num), value)
    name === :bid_prices && return setproperty!(obj, Val(:bid_prices), value)
    name === :bid_quantities && return setproperty!(obj, Val(:bid_quantities), value)
    name === :ask_prices && return setproperty!(obj, Val(:ask_prices), value)
    name === :ask_quantities && return setproperty!(obj, Val(:ask_quantities), value)
    setfield!(obj, name, value)
end

# --------------------------------------------------------------------

@inline function fastbin_calc_binary_size(obj::StreamOrderbook)::UInt64
    return _ask_quantities_offset(obj) + _ask_quantities_size_aligned(obj)
end

@inline function fastbin_calc_binary_size(::Type{StreamOrderbook},
    symbol::AbstractString,
    bid_prices::Vector{Float64},
    bid_quantities::Vector{Float64},
    ask_prices::Vector{Float64},
    ask_quantities::Vector{Float64}
)
    return 64 +
        _symbol_calc_size_aligned(StreamOrderbook, symbol) +
        _bid_prices_calc_size_aligned(StreamOrderbook, bid_prices) +
        _bid_quantities_calc_size_aligned(StreamOrderbook, bid_quantities) +
        _ask_prices_calc_size_aligned(StreamOrderbook, ask_prices) +
        _ask_quantities_calc_size_aligned(StreamOrderbook, ask_quantities)
end

"""
Returns the stored (aligned) binary size of the object.
This function should only be called after `fastbin_finalize!(obj)`.
"""
@inline function fastbin_binary_size(obj::StreamOrderbook)::UInt64
    return unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer))
end

"""
Finalizes the object by writing the binary size to the beginning of its buffer.
After calling this function, the underlying buffer can be used for serialization.
To get the actual buffer size, call `fastbin_binary_size(obj)`.
"""
@inline function fastbin_finalize!(obj::StreamOrderbook)
    unsafe_store!(reinterpret(Ptr{UInt64}, obj.buffer), fastbin_calc_binary_size(obj))
    nothing
end

function show(io::IO, obj::StreamOrderbook)
    print(io, "[my_models::StreamOrderbook]")
    print(io, "\n    server_time: ")
    print(io, server_time(obj))
    print(io, "\n    recv_time: ")
    print(io, recv_time(obj))
    print(io, "\n    cts: ")
    print(io, cts(obj))
    print(io, "\n    type: ")
    print(io, type(obj))
    print(io, "\n    depth: ")
    print(io, depth(obj))
    print(io, "\n    symbol: ")
    print(io, symbol(obj))
    print(io, "\n    update_id: ")
    print(io, update_id(obj))
    print(io, "\n    seq_num: ")
    print(io, seq_num(obj))
    print(io, "\n    bid_prices: ")
    show(io, bid_prices(obj))
    print(io, "\n    bid_quantities: ")
    show(io, bid_quantities(obj))
    print(io, "\n    ask_prices: ")
    show(io, ask_prices(obj))
    print(io, "\n    ask_quantities: ")
    show(io, ask_quantities(obj))
    println(io)
end
