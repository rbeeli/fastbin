import Base.show
import Base.finalizer
using StringViews

"""
Binary serializable data container generated by `fastbin`.

This container has variable size.
All setter methods starting from the first variable-sized member and afterwards MUST be called in order.

Members in order
================
- `values::Vector{ChildFixed}` (variable)
- `str::StringView`        (variable)

The `fastbin_finalize!()` method MUST be called after all setter methods have been called.

It is the responsibility of the caller to ensure that the buffer is
large enough to hold all data.
"""
mutable struct VectorOfFixedSizedStructs
    buffer::Ptr{UInt8}
    buffer_size::UInt64
    owns_buffer::Bool

    function VectorOfFixedSizedStructs(buffer::Ptr{UInt8}, buffer_size::Integer, owns_buffer::Bool)
        owns_buffer || (@assert iszero(UInt(buffer) & 0x7) "Buffer not 8 byte aligned")
        new(buffer, UInt64(buffer_size), owns_buffer)
    end

    function VectorOfFixedSizedStructs(buffer_size::Integer)
        buffer = reinterpret(Ptr{UInt8}, Base.Libc.malloc(buffer_size))
        obj = new(buffer, buffer_size, true)
        finalizer(_finalize!, obj)
    end
end

_finalize!(obj::VectorOfFixedSizedStructs) = Base.Libc.free(obj.buffer)


# Member: values::Vector{ChildFixed}
@inline function Base.getproperty(obj::VectorOfFixedSizedStructs, ::Val{:values})::Vector{ChildFixed}
    ptr::Ptr{ChildFixed} = reinterpret(Ptr{ChildFixed}, obj.buffer + _values_offset(obj))
    unaligned_size::UInt64 = _values_size_unaligned(obj)
    n_bytes::UInt64 = unaligned_size - 8
    count::UInt64 = n_bytes / 16
    return unsafe_wrap(Vector{ChildFixed}, ptr + 8, count, own=false)
end

@inline values(obj::VectorOfFixedSizedStructs)::Vector{ChildFixed} = obj.values

@inline function Base.setproperty!(obj::VectorOfFixedSizedStructs, ::Val{:values}, value::Vector{ChildFixed})
    offset::UInt64 = _values_offset(obj)
    contents_size::UInt64 = length(value) * 16
    unsafe_store!(reinterpret(Ptr{UInt64}, obj.buffer + offset), 8 + contents_size)
    dest_ptr::Ptr{UInt8} = obj.buffer + offset + 8
    src_ptr::Ptr{UInt8} = reinterpret(Ptr{UInt8}, pointer(value))
    unsafe_copyto!(dest_ptr, src_ptr, contents_size)
end

@inline function values!(obj::VectorOfFixedSizedStructs, value::Vector{ChildFixed})
    obj.values = value
end

@inline function _values_offset(obj::VectorOfFixedSizedStructs)::UInt64
    return 8
end

@inline function _values_size_aligned(obj::VectorOfFixedSizedStructs)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _values_offset(obj)))
    return stored_size
end

@inline function _values_calc_size_aligned(::Type{VectorOfFixedSizedStructs}, value::Vector{ChildFixed})::UInt64
    contents_size::UInt64 = length(value) * 16
    return 8 + contents_size
end

@inline function _values_size_unaligned(obj::VectorOfFixedSizedStructs)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _values_offset(obj)))
    return stored_size
end

# Member: str::StringView
@inline function Base.getproperty(obj::VectorOfFixedSizedStructs, ::Val{:str})::StringView
    ptr::Ptr{UInt8} = reinterpret(Ptr{UInt8}, obj.buffer + _str_offset(obj))
    unaligned_size::UInt64 = _str_size_unaligned(obj)
    n_bytes::UInt64 = unaligned_size - 8
    count::UInt64 = n_bytes
    return StringView(unsafe_wrap(Vector{UInt8}, ptr + 8, count, own=false))
end

@inline str(obj::VectorOfFixedSizedStructs)::StringView = obj.str

@inline function Base.setproperty!(obj::VectorOfFixedSizedStructs, ::Val{:str}, value::AbstractString)
    offset::UInt64 = _str_offset(obj)
    contents_size::UInt64 = length(value) * 1
    unaligned_size::UInt64 = 8 + contents_size
    aligned_size::UInt64 = (unaligned_size + 7) & ~7
    aligned_diff::UInt64 = aligned_size - unaligned_size
    aligned_size_high::UInt64 = aligned_size | (aligned_diff << 56)
    unsafe_store!(reinterpret(Ptr{UInt64}, obj.buffer + offset), aligned_size_high)
    dest_ptr::Ptr{UInt8} = obj.buffer + offset + 8
    src_ptr::Ptr{UInt8} = reinterpret(Ptr{UInt8}, pointer(value))
    unsafe_copyto!(dest_ptr, src_ptr, contents_size)
end

@inline function str!(obj::VectorOfFixedSizedStructs, value::AbstractString)
    obj.str = value
end

@inline function _str_offset(obj::VectorOfFixedSizedStructs)::UInt64
    return _values_offset(obj) + _values_size_aligned(obj)
end

@inline function _str_size_aligned(obj::VectorOfFixedSizedStructs)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _str_offset(obj)))
    aligned_size::UInt64 = stored_size & 0x00FFFFFFFFFFFFFF
    return aligned_size
end

@inline function _str_calc_size_aligned(::Type{VectorOfFixedSizedStructs}, value::AbstractString)::UInt64
    contents_size::UInt64 = length(value) * 1
    unaligned_size::UInt64 = 8 + contents_size
    return (unaligned_size + 7) & ~7
end

@inline function _str_size_unaligned(obj::VectorOfFixedSizedStructs)::UInt64
    stored_size::UInt64 = unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer + _str_offset(obj)))
    aligned_diff::UInt64 = stored_size >> 56
    aligned_size::UInt64 = stored_size & 0x00FFFFFFFFFFFFFF
    return aligned_size - aligned_diff
end
@inline function Base.getproperty(obj::VectorOfFixedSizedStructs, name::Symbol)
    name === :values && return getproperty(obj, Val(:values))
    name === :str && return getproperty(obj, Val(:str))
    getfield(obj, name)
end

@inline function Base.setproperty!(obj::VectorOfFixedSizedStructs, name::Symbol, value)
    name === :values && return setproperty!(obj, Val(:values), value)
    name === :str && return setproperty!(obj, Val(:str), value)
    setfield!(obj, name, value)
end

# --------------------------------------------------------------------

@inline function fastbin_calc_binary_size(obj::VectorOfFixedSizedStructs)::UInt64
    return _str_offset(obj) + _str_size_aligned(obj)
end

@inline function fastbin_calc_binary_size(::Type{VectorOfFixedSizedStructs},
    values::Vector{ChildFixed},
    str::AbstractString
)
    return 8 +
        _values_calc_size_aligned(VectorOfFixedSizedStructs, values) +
        _str_calc_size_aligned(VectorOfFixedSizedStructs, str)
end

"""
Returns the stored (aligned) binary size of the object.
This function should only be called after `fastbin_finalize!(obj)`.
"""
@inline function fastbin_binary_size(obj::VectorOfFixedSizedStructs)::UInt64
    return unsafe_load(reinterpret(Ptr{UInt64}, obj.buffer))
end

"""
Finalizes the object by writing the binary size to the beginning of its buffer.
After calling this function, the underlying buffer can be used for serialization.
To get the actual buffer size, call `fastbin_binary_size(obj)`.
"""
@inline function fastbin_finalize!(obj::VectorOfFixedSizedStructs)
    unsafe_store!(reinterpret(Ptr{UInt64}, obj.buffer), fastbin_calc_binary_size(obj))
    nothing
end

function show(io::IO, obj::VectorOfFixedSizedStructs)
    print(io, "[my_models::VectorOfFixedSizedStructs]")
    print(io, "\n    values: ")
    show(io, values(obj))
    print(io, "\n    str: ")
    print(io, str(obj))
    println(io)
end
